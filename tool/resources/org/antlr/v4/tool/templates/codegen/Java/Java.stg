// args must be <object-model-object>, <fields-resulting-in-STs>
ParserFile(f, parser, dfaDefs, bitSetDefs) ::= <<
// $ANTLR ANTLRVersion> <f.fileName> generatedTimestamp>
import org.antlr.runtime.*;

<parser>
>>

Parser(p, funcs) ::= <<
public class <p.name> {
    <funcs; separator="\n">
    <dfaDefs; separator="\n">
    <bitSetDefs; separator="\n">
}
>>

DFADef(dfa) ::= <<
// define <dfa.name>
>>

BitSetDef(b) ::= <<
// define <b.name>
>>

RuleFunction(f,code) ::= <<
<f.modifiers:{f | <f> }>void <f.name>(<f.args>) {
    <code>
}
>>

CodeBlock(c, ops) ::= <<
<ops; separator="\n">
>>

LL1Choice(choice, alts) ::= <<
switch ( input.LA(1) ) {
	<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
	default :
	    error
}
>>

// follow set included as choice by analysis
LL1OptionalBlock ::= LL1Choice

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble) ::= <<
<preamble>
if ( <expr> ) {
    <alts; separator="\n">
}
else {
    NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
}
>>

LL1StarBlock(choice, alts) ::= <<
<choice.loopLabel>:
while (true) {
	switch ( input.LA(1) ) {
		<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
		<alt>
		break;}; separator="\n">
		<cases(ttypes=choice.exitLook)>
		    break <choice.loopLabel>;
		default :
		    error
	}
}
>>

LL1StarBlockSingleAlt(choice, expr, alts, preamble) ::= <<
<preamble>
while ( <expr> ) {
    <alts; separator="\n">
    <choice.loop
}
>>

LL1PlusBlock(choice, alts) ::= <<
int <choice.loopCounterVar> = 0;
<choice.loopLabel>:
while (true) {
	switch ( input.LA(1) ) {
		<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
		<cases(ttypes=choice.exitLook)>
		    if ( <choice.loopCounterVar> >= 1 ) break <choice.loopLabel>;
		    else error
		default :
		    error
	}
}
>>

LL1PlusBlockSingleAlt(choice, expr, alts, preamble) ::= <<
<preamble>
do {
    <alts; separator="\n">
    // TODO: only if !set
    <choice.expr.nextToken.varName> = input.LA(1);
} while ( <expr> );
>>

TestSet(s) ::= <<
<s.set.name>.member(input.LA(1))
>>

TestSetInline(s) ::= <<
<s.ttypes:{ttype | <s.varName>==<ttype>}; separator=" || ">
>>

cases(ttypes) ::= <<
<ttypes:{t | case <t>:}; separator="\n">
>>

InvokeRule(r) ::= <<
pushFollow(<r.follow.name>);
<if(r.label)><r.label> = <endif><r.name>();
state._fsp--;
>>

MatchToken(m) ::= <<
<if(m.label)><m.label> = <endif>match(<m.name>, <m.follow.name>);
>>

Action(a) ::= "<a.ast.text>"
SemPred(p) ::= <<
if (!(<p.ast.text>)) throw new FailedPredicateException(input, "<ruleName>", "<description>");
>>

CaptureNextToken(d) ::= "Token <d.varName> = input.LA(1);"

codeFileExtension() ::= ".java"

true() ::= "true"
false() ::= "false"